
// Функция - Получить значение XDTO
//
// Параметры:
//  ОбъектXDTO			 - ОбъектXDTO - Объект XDTO из которого брать данные 
//  ПутьКЭлементу			 - Строка - путь к нужным данным (с разделением через точку)
//  ЗначениеПоУмолчанию	 - Произвольный - что вернуть если нет нужных данных
// 
// Возвращаемое значение:
//  произвольный - запрашиваемые данные или ЗначениеПоУмолчанию
//
Функция ПолучитьЗначениеXDTO(ОбъектXDTO, ПутьКЭлементу, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Не ОбъектСодержитСвойствоXDTO(ОбъектXDTO, ПутьКЭлементу) Тогда 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	МассивПути = СтрРазделить(ПутьКЭлементу,".");
	ДочернийОбъектXDTO = ОбъектXDTO;
	Для Каждого ЧастьПути из МассивПути Цикл 
		ДочернийОбъектXDTO = ДочернийОбъектXDTO[ЧастьПути];
	КонецЦикла;	
	
	Возврат ДочернийОбъектXDTO;
	
КонецФункции	

Функция ПолучитьЗначениеСпискаXDTO(ОбъектXDTO, ПутьКЭлементу) Экспорт
	
	СписокXDTO =  ПолучитьЗначениеXDTO(ОбъектXDTO, ПутьКЭлементу, Неопределено);
	
	Если СписокXDTO = Неопределено Тогда 
		
		Возврат Новый Массив;
		
	ИначеЕсли  ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда 
		
		Результат = Новый Массив;
		
		Для Каждого ОбъектСпискаXDTO из СписокXDTO Цикл 
			Результат.Добавить(ОбъектСпискаXDTO);
		КонецЦикла;	
		
		Возврат Результат;
			
	Иначе 
		
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокXDTO); //в списке одно значение и он представляется как объект
		
	КонецЕсли;	
	
КонецФункции	

// Функция - Объект содержит свойство XDTO
//
// Параметры:
//  ОбъектXDTO	 - ОбъектXDTO - Объект XDTO из которого брать данные
//  ПутьКЭлементу	 - Строка - путь к проверяемым данным 
// 
// Возвращаемое значение:
//  Булево - есть или нет заправшиваемый путь 
//
функция ОбъектСодержитСвойствоXDTO(ОбъектXDTO, ПутьКЭлементу) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) <> Тип("ОбъектXDTO") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Если  СтрНайти(ПутьКЭлементу,".") = 0 Тогда 
		Возврат ОбъектXDTO.Свойства().Получить(ПутьКЭлементу) <> Неопределено;
	Иначе 
		
		МассивПути = СтрРазделить(ПутьКЭлементу,".");
		ПервоеСвойство = МассивПути[0];
		
		Если ОбъектXDTO.Свойства().Получить(ПервоеСвойство) = Неопределено Тогда 
			Возврат Ложь;
			
		Иначе 
			ДочернийОбъектXDTO = ОбъектXDTO[ПервоеСвойство];
			МассивПути.Удалить(0);
			ДочернийПуть = СтрСоединить(МассивПути,".");
			
			Возврат ОбъектСодержитСвойствоXDTO(ДочернийОбъектXDTO, ДочернийПуть);
			
		КонецЕсли;	
		
	КонецЕсли;
		
КонецФункции	

Функция СписокXDTOНайтиСтроки(ОбъектXDTO, ПутьКЭлементу, СтруктураПоиска) Экспорт 
	
	Результат = Новый Массив;
	
	СписокXDTO = ПолучитьЗначениеСпискаXDTO(ОбъектXDTO, ПутьКЭлементу);
	Для Каждого ЭлементСпискаXDTO Из СписокXDTO Цикл 
		Подходит = Истина;
		
		Для Каждого ЭлементСтруктуры из СтруктураПоиска Цикл 
			
			Если  ПолучитьЗначениеXDTO(ЭлементСпискаXDTO, ЭлементСтруктуры.Ключ) = ЭлементСтруктуры.Значение Тогда 
				Продолжить;
			КонецЕсли;
			
			Подходит = Ложь;
			Прервать;			
			
		КонецЦикла;	
		
		Если Подходит Тогда 
			Результат.Добавить(ЭлементСпискаXDTO);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Результат;
	
	
КонецФункции	


// Функция - Получить реквизит или свойство объекта если у обекта есть соответствующее свойство или реквизит
//
// Параметры:
//  Объект				 - произвольный - объект источник 
//  ИмяРеквизита		 - строка - имя реквизита получаемого у объекта
//  ЗначениеПоУмолчанию	 - произвольный - значение возвращаемое в случае отсутствия реквизита
// 
// Возвращаемое значение:
//  произвольный - значение реквизита или ЗначениеПоУмолчанию
//
Функция ПолучитьРеквизитИлиСвойствоОбъектаЕслиЕсть(Объект, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда 
		Возврат Объект[ИмяРеквизита]; 
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	
	
КонецФункции	

Функция ОписаниеТипаСтрока(Длина = 0, Знач ДопустимаяДлина = Неопределено) Экспорт 
	Если ДопустимаяДлина = Неопределено Тогда 
		ДопустимаяДлина = ПредопределенноеЗначение("ДопустимаяДлина.Переменная");
	КонецЕсли; 
		
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Длина, ДопустимаяДлина));
	
КонецФункции	

Функция ОписаниеТипаДвоичныеДанные(Длина = 0, Знач ДопустимаяДлина = Неопределено) Экспорт 
	Если ДопустимаяДлина = Неопределено Тогда 
		ДопустимаяДлина = ПредопределенноеЗначение("ДопустимаяДлина.Переменная");
	КонецЕсли; 

	
	Возврат Новый ОписаниеТипов("ДвоичныеДанные", ,,, Новый КвалификаторыДвоичныхДанных(Длина, ДопустимаяДлина));
	
КонецФункции	

Функция ОписаниеТипаДата(ЧастиДаты = Неопределено) Экспорт 
	Если ЧастиДаты = Неопределено Тогда 
		ЧастиДаты = ПредопределенноеЗначение("ЧастиДаты.ДатаВремя");
	КонецЕсли; 
	
	Возврат Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты));
	
КонецФункции	

Функция ОписаниеТипаЧисло(ЧислоРазрядов = 10, ЧислоРазрядовДробнойЧасти = 0, Знач ДопустимыйЗнак = Неопределено) Экспорт 
	
	Если ДопустимыйЗнак = Неопределено Тогда 
		ДопустимыйЗнак = ПредопределенноеЗначение("ДопустимыйЗнак.Любой");
	КонецЕсли; 
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнак));
	
КонецФункции	

функция ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, Значение0 = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт 
	
	Колонки = СтрокаТаблицы.Владелец().Колонки; 
	
	Для Каждого Колонка из Колонки Цикл 
		ИндексКолонки = Колонки.Индекс(Колонка);
		ЗначениеПоля = Вычислить("Значение"+ИндексКолонки);
		
		СтрокаТаблицы[Колонка.Имя] = ЗначениеПоля;
		
	КонецЦикла;	
	
	Возврат СтрокаТаблицы;
	
КонецФункции


Функция МассивСтруктурНайти(Массив, Значение, ИменаПолей="") Экспорт 
	
	МассивИменПолей = СтрРазделить(ИменаПолей,",");
	
	 	
	Для Каждого СтрокаМассива из Массив Цикл 
		
		Для Каждого ЗнчениеПоля из СтрокаМассива Цикл 
			Если ЗначениеЗаполнено(МассивИменПолей) и МассивИменПолей.Найти(ЗнчениеПоля.Ключ) = Неопределено Тогда 
				Продолжить;	
			КонецЕсли;
			
			Если ЗнчениеПоля.Значение <> Значение Тогда
				Продолжить;
			КонецЕсли;	
			
			Возврат СтрокаМассива;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Неопределено
	
КонецФункции


// Получает строку, содержащую ключи структуры, разделенные символом разделителя.
//
// Параметры:
//	Структура - Структура - Структура, ключи которой преобразуются в строку.
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры.
//
// Возвращаемое значение:
//	Строка - Строка, содержащая ключи структуры разделенные разделителем.
//
Функция КлючиСтруктурыВСтроку(Структура, Разделитель = ",") Экспорт 
		
	Результат = Новый Массив;
	
	Для Каждого ЭлементСтруктуры из Структура Цикл
		
		Результат.Добавить(ЭлементСтруктуры.Ключ);
		
	КонецЦикла;	
	
	Возврат СтрСоединить(Результат, ",");
	
КонецФункции	
