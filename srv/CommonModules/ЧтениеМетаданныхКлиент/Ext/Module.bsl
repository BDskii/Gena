///////////////////////////////////////////////////////////////////////////////////////////////////
//Интерфейс

Процедура ВыполнитьЧтениеМетаданных(Конфигурация) Экспорт 
	
	ДополнительныеДанные = СформироватьДополнительныеДанные();
	ЗаполнитьДанныеКонфиурации(ДополнительныеДанные, Конфигурация);
	
	ПроверитьКаталог(ДополнительныеДанные);
	ПрочитатьКорневойФайл(ДополнительныеДанные);
	ПрочитатьФайловОбъектов(ДополнительныеДанные);
	
	Состояние("Выполнение операций на сервере.");
	ЧтениеМетаданныхСервер.ОбработатьФайлыОбъектов(ДополнительныеДанные);
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////////////////////////
//Служебные

Функция СформироватьДополнительныеДанные()
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("Конфигурация");
	ДополнительныеДанные.Вставить("ПутьККаталогу");
	ДополнительныеДанные.Вставить("ФорматВыгрузки");
	
	ДополнительныеДанные.Вставить("НомерВерсии");
	ДополнительныеДанные.Вставить("Версия");
	
	
	ДополнительныеДанные.Вставить("ШаблоныСтандартныхРеквизитов",ПодготовитьСоответствиеСтандартныхРеквизитов());
	
	ДополнительныеДанные.Вставить("ТекстМодели");
	ДополнительныеДанные.Вставить("ПутьККорневомуФайлу");
	
	ДополнительныеДанные.Вставить("НомерВерсии");
	
	ДополнительныеДанные.Вставить("ОбъектыКонфигурации",Новый Массив);
	ДополнительныеДанные.Вставить("ШаблонСтрокиОбъектыКонфигурации",Новый Структура);
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("Имя");
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("ИмяТипаИсходное");
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("ИмяОбъекта");
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("Синоним");
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("ИД");
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("СтандартныеРеквизиты", Новый Массив);
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("Реквизиты", Новый Массив);
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("ТабличныеЧасти", Новый Массив);
	ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации.Вставить("Команды", Новый Массив);
	
	ДополнительныеДанные.Вставить("ШаблонДочернегоОбъекта",Новый Структура);
	ДополнительныеДанные.ШаблонДочернегоОбъекта.Вставить("Имя");
	ДополнительныеДанные.ШаблонДочернегоОбъекта.Вставить("ИД");
	ДополнительныеДанные.ШаблонДочернегоОбъекта.Вставить("Синоним");
	ДополнительныеДанные.ШаблонДочернегоОбъекта.Вставить("ДочерниеЭлементы",Новый Массив);
	
	
	Возврат ДополнительныеДанные;
	
КонецФункции	

Процедура ЗаполнитьДанныеКонфиурации(ДополнительныеДанные, Конфигурация)
	
	ДополнительныеДанные.Конфигурация = Конфигурация;
	
	ДанныеКонфигрурации = ОбщиеМеханизмыСервер.ПолучитьЗначенияРеквизитов(Конфигурация,"ПутьККаталогуВыгрузки,ФорматВыгрузки");
	
	ДополнительныеДанные.ПутьККаталогу = ДанныеКонфигрурации.ПутьККаталогуВыгрузки;
	ДополнительныеДанные.ФорматВыгрузки = ДанныеКонфигрурации.ФорматВыгрузки;
	
КонецПроцедуры	

Процедура ПроверитьКаталог(ДополнительныеДанные)
	
	Состояние("Проверка каталога.");
	
	Если Не ЗначениеЗаполнено(ДополнительныеДанные.ПутьККаталогу) Тогда 
		ВызватьИсключение "Не заполнен путь к каталогу";
	КонецЕсли;
	
	Файл = Новый Файл(ДополнительныеДанные.ПутьККаталогу);
	
	Если Не Файл.Существует() Тогда 
		ВызватьИсключение  "Нет каталога выгрузки";	
	КонецЕсли;
	
	ДополнительныеДанные.ПутьККорневомуФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДополнительныеДанные.ПутьККаталогу, "Configuration.xml");
	
	Файл = Новый Файл(ДополнительныеДанные.ПутьККорневомуФайлу);
	
	Если Не Файл.Существует() Тогда 
		ВызватьИсключение "Нет корневого файла";	
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПрочитатьКорневойФайл(ДополнительныеДанные)  
	
	Состояние("Чтение корневого файла.");
	
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ДополнительныеДанные.ПутьККорневомуФайлу);
	ТекстКорневогоФала = ТекстовыйДокумент.ПолучитьТекст();
	
	XDTOОбъект = ЧтениеМетаданныхКлиентСервер.ПрочитатьФайлКонфигурации(ДополнительныеДанные, ТекстКорневогоФала);
	
	ДополнительныеДанные.НомерВерсии = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(XDTOОбъект, "Configuration.Properties.Version");
	
	ОбъектыКонфигурации = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(XDTOОбъект, "Configuration.ChildObjects");
	Если ОбъектыКонфигурации = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Свойство из ОбъектыКонфигурации.Свойства() Цикл
		
		СписокОбъектовТипа = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(ОбъектыКонфигурации, Свойство.Имя);
		
		Для Каждого ИмяОбъекта из СписокОбъектовТипа Цикл 
			
			СтрокаТипа = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонСтрокиОбъектыКонфигурации);
			СтрокаТипа.Имя = ИмяОбъекта;
			СтрокаТипа.ИмяТипаИсходное = Свойство.Имя;
			ДополнительныеДанные.ОбъектыКонфигурации.Добавить(СтрокаТипа);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ПрочитатьФайловОбъектов(ДополнительныеДанные)
	
	Если ДополнительныеДанные.ФорматВыгрузки = ПредопределенноеЗначение("Перечисление.ФорматВыгрузки.Линейный") Тогда 
		ШаблонИмени = "%1.%2.xml";
	Иначе 
		ШаблонИмени = "%1s\%2.xml";
	КонецЕсли;	
	
	Всего = ДополнительныеДанные.ОбъектыКонфигурации.Количество();
	Счетчик = 0;
	
	Для Каждого ОбъектКонфигурации Из ДополнительныеДанные.ОбъектыКонфигурации Цикл
		Счетчик = Счетчик +1;
		Состояние("Чтение файлов объектов.", Счетчик/Всего*100);
		
		
	Если ДополнительныеДанные.ФорматВыгрузки = ПредопределенноеЗначение("Перечисление.ФорматВыгрузки.Линейный") Тогда 
		ШаблонИмени = "%1.%2.xml";
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмени, ОбъектКонфигурации.ИмяТипаИсходное, ОбъектКонфигурации.Имя);
	Иначе 
		
		КаталогОбъекта = ПолучитьКаталогОбъекта(ОбъектКонфигурации.ИмяТипаИсходное);
		ШаблонИмени = "%1\%2.xml";
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмени, КаталогОбъекта, ОбъектКонфигурации.Имя);

	КонецЕсли;

		
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДополнительныеДанные.ПутьККаталогу, ИмяФайла);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКФайлу);
		ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();    
		
		ОбъектXDTO = ЧтениеМетаданныхКлиентСервер.ПрочитатьФайлКонфигурации(ДополнительныеДанные, ТекстФайла);
		
		РазбираемыйОбъект = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ОбъектXDTO, ОбъектКонфигурации.ИмяТипаИсходное);
		
		Если РазбираемыйОбъект = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		
		ОбъектКонфигурации.ИмяОбъекта =  ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(РазбираемыйОбъект,"Properties.Name");
		ОбъектКонфигурации.Синоним = ОпределитьСиноним(РазбираемыйОбъект, ОбъектКонфигурации.ИмяОбъекта);
		ОбъектКонфигурации.ИД = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(РазбираемыйОбъект,"uuid");
		
		СтандартныеРеквизиты = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(РазбираемыйОбъект, "Properties.StandardAttributes.StandardAttribute");
		ШаблоныСтандартных = ДополнительныеДанные.ШаблоныСтандартныхРеквизитов.Получить(ОбъектКонфигурации.ИмяТипаИсходное);
		Если ШаблоныСтандартных = Неопределено Тогда 
			ШаблоныСтандартных = Новый Массив;
		КонецЕсли;	
		//TODO для регистров бухгалтерии список субконто нужно из xdto брать их может быть произвольное количество
		Для Каждого ШаблонСтандартного из ШаблоныСтандартных Цикл 
			
			СтрокаДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонДочернегоОбъекта);
			ОбъектКонфигурации.СтандартныеРеквизиты.Добавить(СтрокаДанных);
			СтрокаДанных.ИД = ШаблонСтандартного.ИмяСист;
			СтрокаДанных.Имя = ШаблонСтандартного.Имя;
			
			МассивСтандартных = ОбщиеМеханизмыКлиентСервер.СписокXDTOНайтиСтроки(СтандартныеРеквизиты,"name",ШаблонСтандартного.ИмяСист);
			
			Если ЗначениеЗаполнено(МассивСтандартных) Тогда 
				СтрокаДанных.Синоним = ОпределитьСиноним(МассивСтандартных[0] , ШаблонСтандартного.Синоним)
			Иначе 
				СтрокаДанных.Синоним = ШаблонСтандартного.Синоним;
			КонецЕсли;	

			
		КонецЦикла;	
		
		
		Реквизиты = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(РазбираемыйОбъект, "ChildObjects.Attribute");
		Для Каждого ДочернийОбъектXDTO из Реквизиты Цикл 
			
			СтрокаДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонДочернегоОбъекта);
			
			ОбъектКонфигурации.Реквизиты.Добавить(СтрокаДанных);
			
			СтрокаДанных.Имя = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO,"Properties.name");
			СтрокаДанных.ИД = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO, "uuid");
			СтрокаДанных.Синоним = ОпределитьСиноним(ДочернийОбъектXDTO, СтрокаДанных.Имя);			
			
			
		КонецЦикла;
		
		ТабличныеЧасти = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(РазбираемыйОбъект, "ChildObjects.TabularSection");
		Для Каждого ДочернийОбъектXDTO из ТабличныеЧасти Цикл 
			
			СтрокаДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонДочернегоОбъекта);
			
			ОбъектКонфигурации.ТабличныеЧасти.Добавить(СтрокаДанных);
			
			СтрокаДанных.Имя = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO,"Properties.name");;
			СтрокаДанных.ИД = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO, "uuid");
			СтрокаДанных.Синоним = ОпределитьСиноним(ДочернийОбъектXDTO, СтрокаДанных.Имя);			
			
			РеквизитыТЧ = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(ДочернийОбъектXDTO, "ChildObjects.Attribute");
			
			Для Каждого СтрокаРеквезита из РеквизитыТЧ Цикл 
				
				СтрокаДанныхДО = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонДочернегоОбъекта);
				СтрокаДанных.ДочерниеЭлементы.Добавить(СтрокаДанныхДО);
				
				СтрокаДанныхДО.Имя = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(СтрокаРеквезита,"Properties.name");;
				СтрокаДанныхДО.ИД = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(СтрокаРеквезита, "uuid");
				СтрокаДанныхДО.Синоним = ОпределитьСиноним(СтрокаРеквезита, СтрокаДанных.Имя);		
				
			КонецЦикла;	
			
		КонецЦикла;
		
		
		Команды = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(РазбираемыйОбъект, "ChildObjects.Command");
		Для Каждого ДочернийОбъектXDTO из Команды Цикл 
			
			СтрокаДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеДанные.ШаблонДочернегоОбъекта);
			
			ОбъектКонфигурации.Команды.Добавить(СтрокаДанных);
			
			СтрокаДанных.Имя = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO,"Properties.name");
			СтрокаДанных.ИД = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(ДочернийОбъектXDTO, "uuid");
			СтрокаДанных.Синоним = ОпределитьСиноним(ДочернийОбъектXDTO, СтрокаДанных.Имя);
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры	

Функция ПодготовитьСоответствиеСтандартныхРеквизитов()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("ExchangePlan",
	СформироватьСтандартныеРеквезиты("ExchangePlan",
	"Ссылка,
	|Код,
	|Наименование,
	|ПометкаУдаления,
	|ЭтотУзел,
	|НомерОтправленного,
	|НомерПринятого"));
	
	Результат.Вставить("Catalog",
	СформироватьСтандартныеРеквезиты("Catalog",
	"Ссылка,
	|Код,
	|Наименование,
	|Владелец,
	|Родитель,
	|ЭтоГруппа,
	|ПометкаУдаления,
	|Предопределенный,
	|ИмяПредопределенныхДанных"));
	
	
	
	Результат.Вставить("Document",
	СформироватьСтандартныеРеквезиты("Document",
	"Ссылка,
	|Номер,
	|Дата,
	|Проведен,
	|ПометкаУдаления"));
	
	Результат.Вставить("ChartOfCharacteristicTypes",
	СформироватьСтандартныеРеквезиты("ChartOfCharacteristicTypes",
	"Ссылка,
	|Код,
	|Наименование,
	|ТипЗначения,
	|Родитель,
	|ЭтоГруппа,
	|ПометкаУдаления,
	|Предопределенный,
	|ИмяПредопределенныхДанных"));
	
	Результат.Вставить("ChartOfAccounts",
	СформироватьСтандартныеРеквезиты("ChartOfAccounts",
	"Ссылка,
	|Код,
	|Наименование,
	|Порядок,
	|Родитель,
	|Вид,
	|Забалансовый,
	|ПометкаУдаления,
	|Предопределенный,
	|ИмяПредопределенныхДанных"));
	
	
	Результат.Вставить("ChartOfCalculationTypes",
	СформироватьСтандартныеРеквезиты("ChartOfCalculationTypes",
	"Ссылка,
	|Код,
	|Наименование,
	|ПометкаУдаления,
	|Предопределенный,
	|ИмяПредопределенныхДанных,
	|ПериодДействияБазовый"));
	
	
	Результат.Вставить("AccountingRegister",
	СформироватьСтандартныеРеквезиты("AccountingRegister",
	"Период,
	|Регистратор,
	|НомерСтроки,
	|Активность,
	|Счет,
	|ВидСубконто,
	|Субконто"));
	
	
	Результат.Вставить("AccumulationRegister",
	СформироватьСтандартныеРеквезиты("AccumulationRegister",
	"Период,
	|Регистратор,
	|НомерСтроки,
	|Активность,
	|ВидДвижения"));
	
	
	Результат.Вставить("CalculationRegister",
	СформироватьСтандартныеРеквезиты("CalculationRegister",
	"ПериодРегистрации,
	|Регистратор,
	|НомерСтроки,
	|ПериодДействия,
	|ПериодДействияНачало,
	|ПериодДействияКонец,
	|БазовыйПериодНачало,
	|БазовыйПериодКонец,
	|Активность,
	|Сторно"));
	
	Результат.Вставить("InformationRegister",
	СформироватьСтандартныеРеквезиты("InformationRegister",
	"Период,
	|Регистратор,
	|НомерСтроки,
	|Активность"));
	
	
	Результат.Вставить("Task",
	СформироватьСтандартныеРеквезиты("Task",
	"Ссылка,
	|Номер,
	|Наименование,
	|Дата,
	|ПометкаУдаления,
	|БизнесПроцесс,
	|ТочкаМаршрута,
	|Выполнена"));
	
	
	Результат.Вставить("BusinessProcess",
	СформироватьСтандартныеРеквезиты("BusinessProcess",
	"Ссылка,
	|Номер,
	|Дата,
	|ВедущаяЗадача,
	|ПометкаУдаления,
	|Стартован,
	|Завершен"));
	
	
	Результат.Вставить("DocumentJournal",
	СформироватьСтандартныеРеквезиты("DocumentJournal",
	"Ссылка,
	|Дата,
	|Номер,
	|Тип,
	|Проведен,
	|ПометкаУдаления"));
	
	Результат.Вставить("Enum",
	СформироватьСтандартныеРеквезиты("Enum",
	"Порядок,
	|Ссылка"));

	
	Возврат Результат;	
	
КонецФункции	

Функция СформироватьСтандартныеРеквезиты(ВидОбъекта,Знач Имена)
	
	Результат = Новый Массив;
	
	Для Каждого Имя из СтрРазделить(Имена,",") Цикл 
		
		Имя = СокрЛП(Имя);
		
		СтандартныйРеквизит = Новый Структура("Имя,ИмяСист,Синоним",Имя,"","");
		
		Если Имя = "Ссылка" Тогда 
			СтандартныйРеквизит.ИмяСист = "Ref";
			СтандартныйРеквизит.Синоним = "Ссылка";
			
		ИначеЕсли Имя = "ИмяПредопределенныхДанных" Тогда 
			СтандартныйРеквизит.ИмяСист = "PredefinedDataName";
			СтандартныйРеквизит.Синоним = "Имя предопределенных данных";
			
		ИначеЕсли Имя = "Предопределенный" Тогда 
			СтандартныйРеквизит.ИмяСист = "Predefined";
			СтандартныйРеквизит.Синоним = "Предопределенный";
			
		ИначеЕсли Имя = "Код" Тогда 
			СтандартныйРеквизит.ИмяСист = "Code";
			СтандартныйРеквизит.Синоним = "Код";
			
		ИначеЕсли Имя = "Наименование" Тогда 
			СтандартныйРеквизит.ИмяСист = "Description";
			СтандартныйРеквизит.Синоним = "Наименование";
			
		ИначеЕсли Имя = "ПометкаУдаления" Тогда 
			СтандартныйРеквизит.ИмяСист = "DeletionMark";
			СтандартныйРеквизит.Синоним = "Пометка удаления";
			
		ИначеЕсли Имя = "ЭтоГруппа" Тогда 
			СтандартныйРеквизит.ИмяСист = "IsFolder";
			СтандартныйРеквизит.Синоним = "Это группа";
			
		ИначеЕсли Имя = "Владелец" Тогда 
			СтандартныйРеквизит.ИмяСист = "Owner";
			СтандартныйРеквизит.Синоним = "Владелец";
			
		ИначеЕсли Имя = "Родитель" Тогда 
			СтандартныйРеквизит.ИмяСист = "Parent";
			СтандартныйРеквизит.Синоним = "Родитель";
			
			
		ИначеЕсли Имя = "Номер" Тогда 
			СтандартныйРеквизит.ИмяСист = "Number";
			СтандартныйРеквизит.Синоним = "Номер";
		
		ИначеЕсли Имя = "Дата" Тогда 
			СтандартныйРеквизит.ИмяСист = "Date";
			СтандартныйРеквизит.Синоним = "Дата";
		
		ИначеЕсли Имя = "Проведен" Тогда 
			СтандартныйРеквизит.ИмяСист = "Posted";
			СтандартныйРеквизит.Синоним = "Проведен";
			
			
		ИначеЕсли Имя = "ЭтотУзел" Тогда 
			СтандартныйРеквизит.ИмяСист = "ThisNode";
			СтандартныйРеквизит.Синоним = "Этот узел";
		
		ИначеЕсли Имя = "НомерОтправленного" Тогда 
			СтандартныйРеквизит.ИмяСист = "SentNo";
			СтандартныйРеквизит.Синоним = "Номер отправленного";
		
		ИначеЕсли Имя = "НомерПринятого" Тогда 
			СтандартныйРеквизит.ИмяСист = "ReceivedNo";
			СтандартныйРеквизит.Синоним = "Номер принятого";
			
			
		ИначеЕсли Имя = "ТипЗначения" Тогда 
			СтандартныйРеквизит.ИмяСист = "ValueType";
			СтандартныйРеквизит.Синоним = "Тип значения";
		
		ИначеЕсли Имя = "Порядок" Тогда 
			СтандартныйРеквизит.ИмяСист = "Order";
			СтандартныйРеквизит.Синоним = "Порядок";
		
		ИначеЕсли Имя = "Вид" и  ВидОбъекта = "ChartOfAccounts" Тогда 
			СтандартныйРеквизит.ИмяСист = "Type";
			СтандартныйРеквизит.Синоним = "Вид";
		
		ИначеЕсли Имя = "Забалансовый" Тогда 
			СтандартныйРеквизит.ИмяСист = "OffBalance";
			СтандартныйРеквизит.Синоним = "Забалансовый";
		
		ИначеЕсли Имя = "ПериодДействияБазовый" Тогда 
			СтандартныйРеквизит.ИмяСист = "ActionPeriodIsBasic";
			СтандартныйРеквизит.Синоним = "Период действия базовый";
		
		ИначеЕсли Имя = "Период" Тогда 
			СтандартныйРеквизит.ИмяСист = "Period";
			СтандартныйРеквизит.Синоним = "Период";
		
		ИначеЕсли Имя = "Регистратор" Тогда 
			СтандартныйРеквизит.ИмяСист = "Recorder";
			СтандартныйРеквизит.Синоним = "Регистратор";
		
		ИначеЕсли Имя = "НомерСтроки" Тогда 
			СтандартныйРеквизит.ИмяСист = "LineNumber";
			СтандартныйРеквизит.Синоним = "Номер строки";
		
		ИначеЕсли Имя = "Активность" Тогда 
			СтандартныйРеквизит.ИмяСист = "Active";
			СтандартныйРеквизит.Синоним = "Активность";
		
		ИначеЕсли Имя = "Счет" Тогда 
			СтандартныйРеквизит.ИмяСист = "Account";
			СтандартныйРеквизит.Синоним = "Счет";
		
		ИначеЕсли Имя = "ВидСубконто" Тогда 
			СтандартныйРеквизит.ИмяСист = "ExtDimensionType";
			СтандартныйРеквизит.Синоним = "Вид субконто";
				
		ИначеЕсли Имя = "Субконто" Тогда  
			СтандартныйРеквизит.ИмяСист = "ExtDimension";
			СтандартныйРеквизит.Синоним = "Субконто";
		
		ИначеЕсли Имя = "ПериодРегистрации" Тогда 
			СтандартныйРеквизит.ИмяСист = "RegistrationPeriod";
			СтандартныйРеквизит.Синоним = "Период регистрации";
		
		ИначеЕсли Имя = "ВидДвижения" Тогда 
			СтандартныйРеквизит.ИмяСист = "CalculationType";
			СтандартныйРеквизит.Синоним = "Вид движения";
		
		ИначеЕсли Имя = "ПериодДействия" Тогда 
			СтандартныйРеквизит.ИмяСист = "ActionPeriod";
			СтандартныйРеквизит.Синоним = "Период действия";
		
		ИначеЕсли Имя = "ПериодДействияНачало" Тогда 
			СтандартныйРеквизит.ИмяСист = "BegOfActionPeriod";
			СтандартныйРеквизит.Синоним = "Период действия начало";
		
		ИначеЕсли Имя = "ПериодДействияКонец" Тогда 
			СтандартныйРеквизит.ИмяСист = "EndOfActionPeriod";
			СтандартныйРеквизит.Синоним = "Период действия конец";
		
		ИначеЕсли Имя = "БазовыйПериодНачало" Тогда 
			СтандартныйРеквизит.ИмяСист = "BegOfBasePeriod";
			СтандартныйРеквизит.Синоним = "Базовый период начало";
		
		ИначеЕсли Имя = "БазовыйПериодКонец" Тогда 
			СтандартныйРеквизит.ИмяСист = "EndOfBasePeriod";
			СтандартныйРеквизит.Синоним = "Базовый период конец";
		
		ИначеЕсли Имя = "Сторно" Тогда 
			СтандартныйРеквизит.ИмяСист = "ReversingEntry";
			СтандартныйРеквизит.Синоним = "Сторно";
			
			
		
		ИначеЕсли Имя = "БизнесПроцесс" Тогда 
			СтандартныйРеквизит.ИмяСист = "BusinessProcess";
			СтандартныйРеквизит.Синоним = "Бизнес процесс";
		
		ИначеЕсли Имя = "ТочкаМаршрута" Тогда 
			СтандартныйРеквизит.ИмяСист = "RoutePoint";
			СтандартныйРеквизит.Синоним = "Точка маршрута";
		
		ИначеЕсли Имя = "Выполнена" Тогда 
			СтандартныйРеквизит.ИмяСист = "Executed";
			СтандартныйРеквизит.Синоним = "Выполнена";
		
		ИначеЕсли Имя = "ВедущаяЗадача" Тогда 
			СтандартныйРеквизит.ИмяСист = "HeadTask";
			СтандартныйРеквизит.Синоним = "Ведущая задача";
		
		ИначеЕсли Имя = "Стартован" Тогда 
			СтандартныйРеквизит.ИмяСист = "Started";
			СтандартныйРеквизит.Синоним = "Стартован";
		
		ИначеЕсли Имя = "Завершен" Тогда 
			СтандартныйРеквизит.ИмяСист = "Completed";
			СтандартныйРеквизит.Синоним = "Завершен";
			
			
		
		ИначеЕсли Имя = "Тип" и ВидОбъекта = "DocumentJournal" Тогда 
			СтандартныйРеквизит.ИмяСист = "Type";
			СтандартныйРеквизит.Синоним = "Тип";
		
		Иначе 
			Шаблон = НСтр("ru = 'Нет описания для реквизита %1.'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,Имя);
			ВызватьИсключение Сообщение;
		КонецЕсли;	
		Результат.Добавить(СтандартныйРеквизит);
		
	КонецЦикла;	
	
	
	Возврат Результат;	
	
КонецФункции	

Функция ОпределитьСиноним(ОбъектXDTO, ЗначениеПоУмолчанию)
	
	Синонимы = ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеСпискаXDTO(ОбъектXDTO, "Properties.Synonym.item");
	
	Если не ЗначениеЗаполнено(Синонимы) Тогда 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;	
	
	Для Каждого СтрокаСинонима из Синонимы Цикл
		
		Если ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(СтрокаСинонима, "lang") <> "ru" Тогда 
			Продолжить;
		КонецЕсли;
		
		Возврат ОбщиеМеханизмыКлиентСервер.ПолучитьЗначениеXDTO(СтрокаСинонима,"content");
		
	КонецЦикла;	
	
КонецФункции

Функция ПолучитьКаталогОбъекта(ТипОбъекта)
	
	Исключения = Новый Структура; 
	Исключения.Вставить("FilterCriterion", "FilterCriteria");
	Исключения.Вставить("ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes");
	Исключения.Вставить("ChartOfAccounts", "ChartsOfAccounts");
	Исключения.Вставить("BusinessProcess","BusinessProcesses");

	
	Если Исключения.Свойство(ТипОбъекта) Тогда 
		Возврат Исключения[ТипОбъекта];
	КонецЕсли;
	
	Возврат ТипОбъекта + "s";
	
КонецФункции	


